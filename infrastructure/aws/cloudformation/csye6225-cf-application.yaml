AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  refStackName: 
    Type: String
  amiId:
    Type: String

Resources: 
# Setup Security Group for Ec2 Instance
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: WebappSecurityGroup

# Create Ec2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt WebappSecurityGroup.GroupId
      DisableApiTermination: false
      SubnetId:
        Fn::ImportValue:
          !Sub "${refStackName}-SubA"
      BlockDeviceMappings: 
        - DeviceName: /dev/sdm
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 20
      ImageId: !Sub ${amiId}

# Create DynamoDB
  dynamoDB: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "csye6225"
      
# Setup DBSecurity Group
  rdsDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Web Servers
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-vpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: "3306"
        ToPort: "3306"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-rdsDBSecurityGroup
  
# Setup RDS Subnet Group
  rdsSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet for RDS instances"
      SubnetIds:
      - Fn::ImportValue:
          !Sub "${refStackName}-SubA"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubB"
      - Fn::ImportValue:
          !Sub "${refStackName}-SubC"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-rdsSubnetGroup

#Create RDS Instance
  rdsInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5
      DBName: csye6225
      Engine: MySQL
      DBInstanceClass: db.t2.medium
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2019
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref rdsSubnetGroup
      VPCSecurityGroups: 
      - !GetAtt rdsDBSecurityGroup.GroupId